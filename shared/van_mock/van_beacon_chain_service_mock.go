// Code generated by MockGen. DO NOT EDIT.
// Source: ./eth/v1alpha1/beacon_chain.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/prysmaticlabs/ethereumapis/eth/v1alpha1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockisListIndexedAttestationsRequest_QueryFilter is a mock of isListIndexedAttestationsRequest_QueryFilter interface.
type MockisListIndexedAttestationsRequest_QueryFilter struct {
	ctrl     *gomock.Controller
	recorder *MockisListIndexedAttestationsRequest_QueryFilterMockRecorder
}

// MockisListIndexedAttestationsRequest_QueryFilterMockRecorder is the mock recorder for MockisListIndexedAttestationsRequest_QueryFilter.
type MockisListIndexedAttestationsRequest_QueryFilterMockRecorder struct {
	mock *MockisListIndexedAttestationsRequest_QueryFilter
}

// NewMockisListIndexedAttestationsRequest_QueryFilter creates a new mock instance.
func NewMockisListIndexedAttestationsRequest_QueryFilter(ctrl *gomock.Controller) *MockisListIndexedAttestationsRequest_QueryFilter {
	mock := &MockisListIndexedAttestationsRequest_QueryFilter{ctrl: ctrl}
	mock.recorder = &MockisListIndexedAttestationsRequest_QueryFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisListIndexedAttestationsRequest_QueryFilter) EXPECT() *MockisListIndexedAttestationsRequest_QueryFilterMockRecorder {
	return m.recorder
}

// MarshalTo mocks base method.
func (m *MockisListIndexedAttestationsRequest_QueryFilter) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisListIndexedAttestationsRequest_QueryFilterMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisListIndexedAttestationsRequest_QueryFilter)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisListIndexedAttestationsRequest_QueryFilter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisListIndexedAttestationsRequest_QueryFilterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisListIndexedAttestationsRequest_QueryFilter)(nil).Size))
}

// isListIndexedAttestationsRequest_QueryFilter mocks base method.
func (m *MockisListIndexedAttestationsRequest_QueryFilter) isListIndexedAttestationsRequest_QueryFilter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isListIndexedAttestationsRequest_QueryFilter")
}

// isListIndexedAttestationsRequest_QueryFilter indicates an expected call of isListIndexedAttestationsRequest_QueryFilter.
func (mr *MockisListIndexedAttestationsRequest_QueryFilterMockRecorder) isListIndexedAttestationsRequest_QueryFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isListIndexedAttestationsRequest_QueryFilter", reflect.TypeOf((*MockisListIndexedAttestationsRequest_QueryFilter)(nil).isListIndexedAttestationsRequest_QueryFilter))
}

// MockisListAttestationsRequest_QueryFilter is a mock of isListAttestationsRequest_QueryFilter interface.
type MockisListAttestationsRequest_QueryFilter struct {
	ctrl     *gomock.Controller
	recorder *MockisListAttestationsRequest_QueryFilterMockRecorder
}

// MockisListAttestationsRequest_QueryFilterMockRecorder is the mock recorder for MockisListAttestationsRequest_QueryFilter.
type MockisListAttestationsRequest_QueryFilterMockRecorder struct {
	mock *MockisListAttestationsRequest_QueryFilter
}

// NewMockisListAttestationsRequest_QueryFilter creates a new mock instance.
func NewMockisListAttestationsRequest_QueryFilter(ctrl *gomock.Controller) *MockisListAttestationsRequest_QueryFilter {
	mock := &MockisListAttestationsRequest_QueryFilter{ctrl: ctrl}
	mock.recorder = &MockisListAttestationsRequest_QueryFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisListAttestationsRequest_QueryFilter) EXPECT() *MockisListAttestationsRequest_QueryFilterMockRecorder {
	return m.recorder
}

// MarshalTo mocks base method.
func (m *MockisListAttestationsRequest_QueryFilter) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisListAttestationsRequest_QueryFilterMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisListAttestationsRequest_QueryFilter)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisListAttestationsRequest_QueryFilter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisListAttestationsRequest_QueryFilterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisListAttestationsRequest_QueryFilter)(nil).Size))
}

// isListAttestationsRequest_QueryFilter mocks base method.
func (m *MockisListAttestationsRequest_QueryFilter) isListAttestationsRequest_QueryFilter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isListAttestationsRequest_QueryFilter")
}

// isListAttestationsRequest_QueryFilter indicates an expected call of isListAttestationsRequest_QueryFilter.
func (mr *MockisListAttestationsRequest_QueryFilterMockRecorder) isListAttestationsRequest_QueryFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isListAttestationsRequest_QueryFilter", reflect.TypeOf((*MockisListAttestationsRequest_QueryFilter)(nil).isListAttestationsRequest_QueryFilter))
}

// MockisListBlocksRequest_QueryFilter is a mock of isListBlocksRequest_QueryFilter interface.
type MockisListBlocksRequest_QueryFilter struct {
	ctrl     *gomock.Controller
	recorder *MockisListBlocksRequest_QueryFilterMockRecorder
}

// MockisListBlocksRequest_QueryFilterMockRecorder is the mock recorder for MockisListBlocksRequest_QueryFilter.
type MockisListBlocksRequest_QueryFilterMockRecorder struct {
	mock *MockisListBlocksRequest_QueryFilter
}

// NewMockisListBlocksRequest_QueryFilter creates a new mock instance.
func NewMockisListBlocksRequest_QueryFilter(ctrl *gomock.Controller) *MockisListBlocksRequest_QueryFilter {
	mock := &MockisListBlocksRequest_QueryFilter{ctrl: ctrl}
	mock.recorder = &MockisListBlocksRequest_QueryFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisListBlocksRequest_QueryFilter) EXPECT() *MockisListBlocksRequest_QueryFilterMockRecorder {
	return m.recorder
}

// MarshalTo mocks base method.
func (m *MockisListBlocksRequest_QueryFilter) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisListBlocksRequest_QueryFilterMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisListBlocksRequest_QueryFilter)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisListBlocksRequest_QueryFilter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisListBlocksRequest_QueryFilterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisListBlocksRequest_QueryFilter)(nil).Size))
}

// isListBlocksRequest_QueryFilter mocks base method.
func (m *MockisListBlocksRequest_QueryFilter) isListBlocksRequest_QueryFilter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isListBlocksRequest_QueryFilter")
}

// isListBlocksRequest_QueryFilter indicates an expected call of isListBlocksRequest_QueryFilter.
func (mr *MockisListBlocksRequest_QueryFilterMockRecorder) isListBlocksRequest_QueryFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isListBlocksRequest_QueryFilter", reflect.TypeOf((*MockisListBlocksRequest_QueryFilter)(nil).isListBlocksRequest_QueryFilter))
}

// MockisListCommitteesRequest_QueryFilter is a mock of isListCommitteesRequest_QueryFilter interface.
type MockisListCommitteesRequest_QueryFilter struct {
	ctrl     *gomock.Controller
	recorder *MockisListCommitteesRequest_QueryFilterMockRecorder
}

// MockisListCommitteesRequest_QueryFilterMockRecorder is the mock recorder for MockisListCommitteesRequest_QueryFilter.
type MockisListCommitteesRequest_QueryFilterMockRecorder struct {
	mock *MockisListCommitteesRequest_QueryFilter
}

// NewMockisListCommitteesRequest_QueryFilter creates a new mock instance.
func NewMockisListCommitteesRequest_QueryFilter(ctrl *gomock.Controller) *MockisListCommitteesRequest_QueryFilter {
	mock := &MockisListCommitteesRequest_QueryFilter{ctrl: ctrl}
	mock.recorder = &MockisListCommitteesRequest_QueryFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisListCommitteesRequest_QueryFilter) EXPECT() *MockisListCommitteesRequest_QueryFilterMockRecorder {
	return m.recorder
}

// MarshalTo mocks base method.
func (m *MockisListCommitteesRequest_QueryFilter) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisListCommitteesRequest_QueryFilterMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisListCommitteesRequest_QueryFilter)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisListCommitteesRequest_QueryFilter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisListCommitteesRequest_QueryFilterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisListCommitteesRequest_QueryFilter)(nil).Size))
}

// isListCommitteesRequest_QueryFilter mocks base method.
func (m *MockisListCommitteesRequest_QueryFilter) isListCommitteesRequest_QueryFilter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isListCommitteesRequest_QueryFilter")
}

// isListCommitteesRequest_QueryFilter indicates an expected call of isListCommitteesRequest_QueryFilter.
func (mr *MockisListCommitteesRequest_QueryFilterMockRecorder) isListCommitteesRequest_QueryFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isListCommitteesRequest_QueryFilter", reflect.TypeOf((*MockisListCommitteesRequest_QueryFilter)(nil).isListCommitteesRequest_QueryFilter))
}

// MockisListValidatorBalancesRequest_QueryFilter is a mock of isListValidatorBalancesRequest_QueryFilter interface.
type MockisListValidatorBalancesRequest_QueryFilter struct {
	ctrl     *gomock.Controller
	recorder *MockisListValidatorBalancesRequest_QueryFilterMockRecorder
}

// MockisListValidatorBalancesRequest_QueryFilterMockRecorder is the mock recorder for MockisListValidatorBalancesRequest_QueryFilter.
type MockisListValidatorBalancesRequest_QueryFilterMockRecorder struct {
	mock *MockisListValidatorBalancesRequest_QueryFilter
}

// NewMockisListValidatorBalancesRequest_QueryFilter creates a new mock instance.
func NewMockisListValidatorBalancesRequest_QueryFilter(ctrl *gomock.Controller) *MockisListValidatorBalancesRequest_QueryFilter {
	mock := &MockisListValidatorBalancesRequest_QueryFilter{ctrl: ctrl}
	mock.recorder = &MockisListValidatorBalancesRequest_QueryFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisListValidatorBalancesRequest_QueryFilter) EXPECT() *MockisListValidatorBalancesRequest_QueryFilterMockRecorder {
	return m.recorder
}

// MarshalTo mocks base method.
func (m *MockisListValidatorBalancesRequest_QueryFilter) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisListValidatorBalancesRequest_QueryFilterMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisListValidatorBalancesRequest_QueryFilter)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisListValidatorBalancesRequest_QueryFilter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisListValidatorBalancesRequest_QueryFilterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisListValidatorBalancesRequest_QueryFilter)(nil).Size))
}

// isListValidatorBalancesRequest_QueryFilter mocks base method.
func (m *MockisListValidatorBalancesRequest_QueryFilter) isListValidatorBalancesRequest_QueryFilter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isListValidatorBalancesRequest_QueryFilter")
}

// isListValidatorBalancesRequest_QueryFilter indicates an expected call of isListValidatorBalancesRequest_QueryFilter.
func (mr *MockisListValidatorBalancesRequest_QueryFilterMockRecorder) isListValidatorBalancesRequest_QueryFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isListValidatorBalancesRequest_QueryFilter", reflect.TypeOf((*MockisListValidatorBalancesRequest_QueryFilter)(nil).isListValidatorBalancesRequest_QueryFilter))
}

// MockisListValidatorsRequest_QueryFilter is a mock of isListValidatorsRequest_QueryFilter interface.
type MockisListValidatorsRequest_QueryFilter struct {
	ctrl     *gomock.Controller
	recorder *MockisListValidatorsRequest_QueryFilterMockRecorder
}

// MockisListValidatorsRequest_QueryFilterMockRecorder is the mock recorder for MockisListValidatorsRequest_QueryFilter.
type MockisListValidatorsRequest_QueryFilterMockRecorder struct {
	mock *MockisListValidatorsRequest_QueryFilter
}

// NewMockisListValidatorsRequest_QueryFilter creates a new mock instance.
func NewMockisListValidatorsRequest_QueryFilter(ctrl *gomock.Controller) *MockisListValidatorsRequest_QueryFilter {
	mock := &MockisListValidatorsRequest_QueryFilter{ctrl: ctrl}
	mock.recorder = &MockisListValidatorsRequest_QueryFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisListValidatorsRequest_QueryFilter) EXPECT() *MockisListValidatorsRequest_QueryFilterMockRecorder {
	return m.recorder
}

// MarshalTo mocks base method.
func (m *MockisListValidatorsRequest_QueryFilter) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisListValidatorsRequest_QueryFilterMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisListValidatorsRequest_QueryFilter)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisListValidatorsRequest_QueryFilter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisListValidatorsRequest_QueryFilterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisListValidatorsRequest_QueryFilter)(nil).Size))
}

// isListValidatorsRequest_QueryFilter mocks base method.
func (m *MockisListValidatorsRequest_QueryFilter) isListValidatorsRequest_QueryFilter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isListValidatorsRequest_QueryFilter")
}

// isListValidatorsRequest_QueryFilter indicates an expected call of isListValidatorsRequest_QueryFilter.
func (mr *MockisListValidatorsRequest_QueryFilterMockRecorder) isListValidatorsRequest_QueryFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isListValidatorsRequest_QueryFilter", reflect.TypeOf((*MockisListValidatorsRequest_QueryFilter)(nil).isListValidatorsRequest_QueryFilter))
}

// MockisGetValidatorRequest_QueryFilter is a mock of isGetValidatorRequest_QueryFilter interface.
type MockisGetValidatorRequest_QueryFilter struct {
	ctrl     *gomock.Controller
	recorder *MockisGetValidatorRequest_QueryFilterMockRecorder
}

// MockisGetValidatorRequest_QueryFilterMockRecorder is the mock recorder for MockisGetValidatorRequest_QueryFilter.
type MockisGetValidatorRequest_QueryFilterMockRecorder struct {
	mock *MockisGetValidatorRequest_QueryFilter
}

// NewMockisGetValidatorRequest_QueryFilter creates a new mock instance.
func NewMockisGetValidatorRequest_QueryFilter(ctrl *gomock.Controller) *MockisGetValidatorRequest_QueryFilter {
	mock := &MockisGetValidatorRequest_QueryFilter{ctrl: ctrl}
	mock.recorder = &MockisGetValidatorRequest_QueryFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisGetValidatorRequest_QueryFilter) EXPECT() *MockisGetValidatorRequest_QueryFilterMockRecorder {
	return m.recorder
}

// MarshalTo mocks base method.
func (m *MockisGetValidatorRequest_QueryFilter) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisGetValidatorRequest_QueryFilterMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisGetValidatorRequest_QueryFilter)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisGetValidatorRequest_QueryFilter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisGetValidatorRequest_QueryFilterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisGetValidatorRequest_QueryFilter)(nil).Size))
}

// isGetValidatorRequest_QueryFilter mocks base method.
func (m *MockisGetValidatorRequest_QueryFilter) isGetValidatorRequest_QueryFilter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isGetValidatorRequest_QueryFilter")
}

// isGetValidatorRequest_QueryFilter indicates an expected call of isGetValidatorRequest_QueryFilter.
func (mr *MockisGetValidatorRequest_QueryFilterMockRecorder) isGetValidatorRequest_QueryFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGetValidatorRequest_QueryFilter", reflect.TypeOf((*MockisGetValidatorRequest_QueryFilter)(nil).isGetValidatorRequest_QueryFilter))
}

// MockisGetValidatorActiveSetChangesRequest_QueryFilter is a mock of isGetValidatorActiveSetChangesRequest_QueryFilter interface.
type MockisGetValidatorActiveSetChangesRequest_QueryFilter struct {
	ctrl     *gomock.Controller
	recorder *MockisGetValidatorActiveSetChangesRequest_QueryFilterMockRecorder
}

// MockisGetValidatorActiveSetChangesRequest_QueryFilterMockRecorder is the mock recorder for MockisGetValidatorActiveSetChangesRequest_QueryFilter.
type MockisGetValidatorActiveSetChangesRequest_QueryFilterMockRecorder struct {
	mock *MockisGetValidatorActiveSetChangesRequest_QueryFilter
}

// NewMockisGetValidatorActiveSetChangesRequest_QueryFilter creates a new mock instance.
func NewMockisGetValidatorActiveSetChangesRequest_QueryFilter(ctrl *gomock.Controller) *MockisGetValidatorActiveSetChangesRequest_QueryFilter {
	mock := &MockisGetValidatorActiveSetChangesRequest_QueryFilter{ctrl: ctrl}
	mock.recorder = &MockisGetValidatorActiveSetChangesRequest_QueryFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisGetValidatorActiveSetChangesRequest_QueryFilter) EXPECT() *MockisGetValidatorActiveSetChangesRequest_QueryFilterMockRecorder {
	return m.recorder
}

// MarshalTo mocks base method.
func (m *MockisGetValidatorActiveSetChangesRequest_QueryFilter) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisGetValidatorActiveSetChangesRequest_QueryFilterMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisGetValidatorActiveSetChangesRequest_QueryFilter)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisGetValidatorActiveSetChangesRequest_QueryFilter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisGetValidatorActiveSetChangesRequest_QueryFilterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisGetValidatorActiveSetChangesRequest_QueryFilter)(nil).Size))
}

// isGetValidatorActiveSetChangesRequest_QueryFilter mocks base method.
func (m *MockisGetValidatorActiveSetChangesRequest_QueryFilter) isGetValidatorActiveSetChangesRequest_QueryFilter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isGetValidatorActiveSetChangesRequest_QueryFilter")
}

// isGetValidatorActiveSetChangesRequest_QueryFilter indicates an expected call of isGetValidatorActiveSetChangesRequest_QueryFilter.
func (mr *MockisGetValidatorActiveSetChangesRequest_QueryFilterMockRecorder) isGetValidatorActiveSetChangesRequest_QueryFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGetValidatorActiveSetChangesRequest_QueryFilter", reflect.TypeOf((*MockisGetValidatorActiveSetChangesRequest_QueryFilter)(nil).isGetValidatorActiveSetChangesRequest_QueryFilter))
}

// MockisListValidatorAssignmentsRequest_QueryFilter is a mock of isListValidatorAssignmentsRequest_QueryFilter interface.
type MockisListValidatorAssignmentsRequest_QueryFilter struct {
	ctrl     *gomock.Controller
	recorder *MockisListValidatorAssignmentsRequest_QueryFilterMockRecorder
}

// MockisListValidatorAssignmentsRequest_QueryFilterMockRecorder is the mock recorder for MockisListValidatorAssignmentsRequest_QueryFilter.
type MockisListValidatorAssignmentsRequest_QueryFilterMockRecorder struct {
	mock *MockisListValidatorAssignmentsRequest_QueryFilter
}

// NewMockisListValidatorAssignmentsRequest_QueryFilter creates a new mock instance.
func NewMockisListValidatorAssignmentsRequest_QueryFilter(ctrl *gomock.Controller) *MockisListValidatorAssignmentsRequest_QueryFilter {
	mock := &MockisListValidatorAssignmentsRequest_QueryFilter{ctrl: ctrl}
	mock.recorder = &MockisListValidatorAssignmentsRequest_QueryFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisListValidatorAssignmentsRequest_QueryFilter) EXPECT() *MockisListValidatorAssignmentsRequest_QueryFilterMockRecorder {
	return m.recorder
}

// MarshalTo mocks base method.
func (m *MockisListValidatorAssignmentsRequest_QueryFilter) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisListValidatorAssignmentsRequest_QueryFilterMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisListValidatorAssignmentsRequest_QueryFilter)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisListValidatorAssignmentsRequest_QueryFilter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisListValidatorAssignmentsRequest_QueryFilterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisListValidatorAssignmentsRequest_QueryFilter)(nil).Size))
}

// isListValidatorAssignmentsRequest_QueryFilter mocks base method.
func (m *MockisListValidatorAssignmentsRequest_QueryFilter) isListValidatorAssignmentsRequest_QueryFilter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isListValidatorAssignmentsRequest_QueryFilter")
}

// isListValidatorAssignmentsRequest_QueryFilter indicates an expected call of isListValidatorAssignmentsRequest_QueryFilter.
func (mr *MockisListValidatorAssignmentsRequest_QueryFilterMockRecorder) isListValidatorAssignmentsRequest_QueryFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isListValidatorAssignmentsRequest_QueryFilter", reflect.TypeOf((*MockisListValidatorAssignmentsRequest_QueryFilter)(nil).isListValidatorAssignmentsRequest_QueryFilter))
}

// MockisGetValidatorParticipationRequest_QueryFilter is a mock of isGetValidatorParticipationRequest_QueryFilter interface.
type MockisGetValidatorParticipationRequest_QueryFilter struct {
	ctrl     *gomock.Controller
	recorder *MockisGetValidatorParticipationRequest_QueryFilterMockRecorder
}

// MockisGetValidatorParticipationRequest_QueryFilterMockRecorder is the mock recorder for MockisGetValidatorParticipationRequest_QueryFilter.
type MockisGetValidatorParticipationRequest_QueryFilterMockRecorder struct {
	mock *MockisGetValidatorParticipationRequest_QueryFilter
}

// NewMockisGetValidatorParticipationRequest_QueryFilter creates a new mock instance.
func NewMockisGetValidatorParticipationRequest_QueryFilter(ctrl *gomock.Controller) *MockisGetValidatorParticipationRequest_QueryFilter {
	mock := &MockisGetValidatorParticipationRequest_QueryFilter{ctrl: ctrl}
	mock.recorder = &MockisGetValidatorParticipationRequest_QueryFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisGetValidatorParticipationRequest_QueryFilter) EXPECT() *MockisGetValidatorParticipationRequest_QueryFilterMockRecorder {
	return m.recorder
}

// MarshalTo mocks base method.
func (m *MockisGetValidatorParticipationRequest_QueryFilter) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisGetValidatorParticipationRequest_QueryFilterMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisGetValidatorParticipationRequest_QueryFilter)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisGetValidatorParticipationRequest_QueryFilter) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisGetValidatorParticipationRequest_QueryFilterMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisGetValidatorParticipationRequest_QueryFilter)(nil).Size))
}

// isGetValidatorParticipationRequest_QueryFilter mocks base method.
func (m *MockisGetValidatorParticipationRequest_QueryFilter) isGetValidatorParticipationRequest_QueryFilter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isGetValidatorParticipationRequest_QueryFilter")
}

// isGetValidatorParticipationRequest_QueryFilter indicates an expected call of isGetValidatorParticipationRequest_QueryFilter.
func (mr *MockisGetValidatorParticipationRequest_QueryFilterMockRecorder) isGetValidatorParticipationRequest_QueryFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGetValidatorParticipationRequest_QueryFilter", reflect.TypeOf((*MockisGetValidatorParticipationRequest_QueryFilter)(nil).isGetValidatorParticipationRequest_QueryFilter))
}

// MockBeaconChainClient is a mock of BeaconChainClient interface.
type MockBeaconChainClient struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChainClientMockRecorder
}

// MockBeaconChainClientMockRecorder is the mock recorder for MockBeaconChainClient.
type MockBeaconChainClientMockRecorder struct {
	mock *MockBeaconChainClient
}

// NewMockBeaconChainClient creates a new mock instance.
func NewMockBeaconChainClient(ctrl *gomock.Controller) *MockBeaconChainClient {
	mock := &MockBeaconChainClient{ctrl: ctrl}
	mock.recorder = &MockBeaconChainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChainClient) EXPECT() *MockBeaconChainClientMockRecorder {
	return m.recorder
}

// AttestationPool mocks base method.
func (m *MockBeaconChainClient) AttestationPool(ctx context.Context, in *v1alpha1.AttestationPoolRequest, opts ...grpc.CallOption) (*v1alpha1.AttestationPoolResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttestationPool", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AttestationPoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttestationPool indicates an expected call of AttestationPool.
func (mr *MockBeaconChainClientMockRecorder) AttestationPool(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttestationPool", reflect.TypeOf((*MockBeaconChainClient)(nil).AttestationPool), varargs...)
}

// GetBeaconConfig mocks base method.
func (m *MockBeaconChainClient) GetBeaconConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1alpha1.BeaconConfig, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBeaconConfig", varargs...)
	ret0, _ := ret[0].(*v1alpha1.BeaconConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeaconConfig indicates an expected call of GetBeaconConfig.
func (mr *MockBeaconChainClientMockRecorder) GetBeaconConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeaconConfig", reflect.TypeOf((*MockBeaconChainClient)(nil).GetBeaconConfig), varargs...)
}

// GetChainHead mocks base method.
func (m *MockBeaconChainClient) GetChainHead(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1alpha1.ChainHead, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChainHead", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ChainHead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainHead indicates an expected call of GetChainHead.
func (mr *MockBeaconChainClientMockRecorder) GetChainHead(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainHead", reflect.TypeOf((*MockBeaconChainClient)(nil).GetChainHead), varargs...)
}

// GetIndividualVotes mocks base method.
func (m *MockBeaconChainClient) GetIndividualVotes(ctx context.Context, in *v1alpha1.IndividualVotesRequest, opts ...grpc.CallOption) (*v1alpha1.IndividualVotesRespond, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIndividualVotes", varargs...)
	ret0, _ := ret[0].(*v1alpha1.IndividualVotesRespond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndividualVotes indicates an expected call of GetIndividualVotes.
func (mr *MockBeaconChainClientMockRecorder) GetIndividualVotes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualVotes", reflect.TypeOf((*MockBeaconChainClient)(nil).GetIndividualVotes), varargs...)
}

// GetValidator mocks base method.
func (m *MockBeaconChainClient) GetValidator(ctx context.Context, in *v1alpha1.GetValidatorRequest, opts ...grpc.CallOption) (*v1alpha1.Validator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidator", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidator indicates an expected call of GetValidator.
func (mr *MockBeaconChainClientMockRecorder) GetValidator(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockBeaconChainClient)(nil).GetValidator), varargs...)
}

// GetValidatorActiveSetChanges mocks base method.
func (m *MockBeaconChainClient) GetValidatorActiveSetChanges(ctx context.Context, in *v1alpha1.GetValidatorActiveSetChangesRequest, opts ...grpc.CallOption) (*v1alpha1.ActiveSetChanges, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidatorActiveSetChanges", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ActiveSetChanges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorActiveSetChanges indicates an expected call of GetValidatorActiveSetChanges.
func (mr *MockBeaconChainClientMockRecorder) GetValidatorActiveSetChanges(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorActiveSetChanges", reflect.TypeOf((*MockBeaconChainClient)(nil).GetValidatorActiveSetChanges), varargs...)
}

// GetValidatorParticipation mocks base method.
func (m *MockBeaconChainClient) GetValidatorParticipation(ctx context.Context, in *v1alpha1.GetValidatorParticipationRequest, opts ...grpc.CallOption) (*v1alpha1.ValidatorParticipationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidatorParticipation", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ValidatorParticipationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorParticipation indicates an expected call of GetValidatorParticipation.
func (mr *MockBeaconChainClientMockRecorder) GetValidatorParticipation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorParticipation", reflect.TypeOf((*MockBeaconChainClient)(nil).GetValidatorParticipation), varargs...)
}

// GetValidatorPerformance mocks base method.
func (m *MockBeaconChainClient) GetValidatorPerformance(ctx context.Context, in *v1alpha1.ValidatorPerformanceRequest, opts ...grpc.CallOption) (*v1alpha1.ValidatorPerformanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidatorPerformance", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ValidatorPerformanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorPerformance indicates an expected call of GetValidatorPerformance.
func (mr *MockBeaconChainClientMockRecorder) GetValidatorPerformance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorPerformance", reflect.TypeOf((*MockBeaconChainClient)(nil).GetValidatorPerformance), varargs...)
}

// GetValidatorQueue mocks base method.
func (m *MockBeaconChainClient) GetValidatorQueue(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1alpha1.ValidatorQueue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidatorQueue", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ValidatorQueue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorQueue indicates an expected call of GetValidatorQueue.
func (mr *MockBeaconChainClientMockRecorder) GetValidatorQueue(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorQueue", reflect.TypeOf((*MockBeaconChainClient)(nil).GetValidatorQueue), varargs...)
}

// GetWeakSubjectivityCheckpoint mocks base method.
func (m *MockBeaconChainClient) GetWeakSubjectivityCheckpoint(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*v1alpha1.WeakSubjectivityCheckpoint, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWeakSubjectivityCheckpoint", varargs...)
	ret0, _ := ret[0].(*v1alpha1.WeakSubjectivityCheckpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeakSubjectivityCheckpoint indicates an expected call of GetWeakSubjectivityCheckpoint.
func (mr *MockBeaconChainClientMockRecorder) GetWeakSubjectivityCheckpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeakSubjectivityCheckpoint", reflect.TypeOf((*MockBeaconChainClient)(nil).GetWeakSubjectivityCheckpoint), varargs...)
}

// ListAttestations mocks base method.
func (m *MockBeaconChainClient) ListAttestations(ctx context.Context, in *v1alpha1.ListAttestationsRequest, opts ...grpc.CallOption) (*v1alpha1.ListAttestationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttestations", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListAttestationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttestations indicates an expected call of ListAttestations.
func (mr *MockBeaconChainClientMockRecorder) ListAttestations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttestations", reflect.TypeOf((*MockBeaconChainClient)(nil).ListAttestations), varargs...)
}

// ListBeaconCommittees mocks base method.
func (m *MockBeaconChainClient) ListBeaconCommittees(ctx context.Context, in *v1alpha1.ListCommitteesRequest, opts ...grpc.CallOption) (*v1alpha1.BeaconCommittees, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBeaconCommittees", varargs...)
	ret0, _ := ret[0].(*v1alpha1.BeaconCommittees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBeaconCommittees indicates an expected call of ListBeaconCommittees.
func (mr *MockBeaconChainClientMockRecorder) ListBeaconCommittees(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBeaconCommittees", reflect.TypeOf((*MockBeaconChainClient)(nil).ListBeaconCommittees), varargs...)
}

// ListBlocks mocks base method.
func (m *MockBeaconChainClient) ListBlocks(ctx context.Context, in *v1alpha1.ListBlocksRequest, opts ...grpc.CallOption) (*v1alpha1.ListBlocksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBlocks", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListBlocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlocks indicates an expected call of ListBlocks.
func (mr *MockBeaconChainClientMockRecorder) ListBlocks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlocks", reflect.TypeOf((*MockBeaconChainClient)(nil).ListBlocks), varargs...)
}

// ListIndexedAttestations mocks base method.
func (m *MockBeaconChainClient) ListIndexedAttestations(ctx context.Context, in *v1alpha1.ListIndexedAttestationsRequest, opts ...grpc.CallOption) (*v1alpha1.ListIndexedAttestationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIndexedAttestations", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListIndexedAttestationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndexedAttestations indicates an expected call of ListIndexedAttestations.
func (mr *MockBeaconChainClientMockRecorder) ListIndexedAttestations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexedAttestations", reflect.TypeOf((*MockBeaconChainClient)(nil).ListIndexedAttestations), varargs...)
}

// ListValidatorAssignments mocks base method.
func (m *MockBeaconChainClient) ListValidatorAssignments(ctx context.Context, in *v1alpha1.ListValidatorAssignmentsRequest, opts ...grpc.CallOption) (*v1alpha1.ValidatorAssignments, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListValidatorAssignments", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ValidatorAssignments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListValidatorAssignments indicates an expected call of ListValidatorAssignments.
func (mr *MockBeaconChainClientMockRecorder) ListValidatorAssignments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListValidatorAssignments", reflect.TypeOf((*MockBeaconChainClient)(nil).ListValidatorAssignments), varargs...)
}

// ListValidatorBalances mocks base method.
func (m *MockBeaconChainClient) ListValidatorBalances(ctx context.Context, in *v1alpha1.ListValidatorBalancesRequest, opts ...grpc.CallOption) (*v1alpha1.ValidatorBalances, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListValidatorBalances", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ValidatorBalances)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListValidatorBalances indicates an expected call of ListValidatorBalances.
func (mr *MockBeaconChainClientMockRecorder) ListValidatorBalances(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListValidatorBalances", reflect.TypeOf((*MockBeaconChainClient)(nil).ListValidatorBalances), varargs...)
}

// ListValidators mocks base method.
func (m *MockBeaconChainClient) ListValidators(ctx context.Context, in *v1alpha1.ListValidatorsRequest, opts ...grpc.CallOption) (*v1alpha1.Validators, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListValidators", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Validators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListValidators indicates an expected call of ListValidators.
func (mr *MockBeaconChainClientMockRecorder) ListValidators(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListValidators", reflect.TypeOf((*MockBeaconChainClient)(nil).ListValidators), varargs...)
}

// StreamAttestations mocks base method.
func (m *MockBeaconChainClient) StreamAttestations(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (v1alpha1.BeaconChain_StreamAttestationsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamAttestations", varargs...)
	ret0, _ := ret[0].(v1alpha1.BeaconChain_StreamAttestationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamAttestations indicates an expected call of StreamAttestations.
func (mr *MockBeaconChainClientMockRecorder) StreamAttestations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamAttestations", reflect.TypeOf((*MockBeaconChainClient)(nil).StreamAttestations), varargs...)
}

// StreamBlocks mocks base method.
func (m *MockBeaconChainClient) StreamBlocks(ctx context.Context, in *v1alpha1.StreamBlocksRequest, opts ...grpc.CallOption) (v1alpha1.BeaconChain_StreamBlocksClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamBlocks", varargs...)
	ret0, _ := ret[0].(v1alpha1.BeaconChain_StreamBlocksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamBlocks indicates an expected call of StreamBlocks.
func (mr *MockBeaconChainClientMockRecorder) StreamBlocks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamBlocks", reflect.TypeOf((*MockBeaconChainClient)(nil).StreamBlocks), varargs...)
}

// StreamChainHead mocks base method.
func (m *MockBeaconChainClient) StreamChainHead(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (v1alpha1.BeaconChain_StreamChainHeadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamChainHead", varargs...)
	ret0, _ := ret[0].(v1alpha1.BeaconChain_StreamChainHeadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamChainHead indicates an expected call of StreamChainHead.
func (mr *MockBeaconChainClientMockRecorder) StreamChainHead(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamChainHead", reflect.TypeOf((*MockBeaconChainClient)(nil).StreamChainHead), varargs...)
}

// StreamIndexedAttestations mocks base method.
func (m *MockBeaconChainClient) StreamIndexedAttestations(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (v1alpha1.BeaconChain_StreamIndexedAttestationsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamIndexedAttestations", varargs...)
	ret0, _ := ret[0].(v1alpha1.BeaconChain_StreamIndexedAttestationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamIndexedAttestations indicates an expected call of StreamIndexedAttestations.
func (mr *MockBeaconChainClientMockRecorder) StreamIndexedAttestations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamIndexedAttestations", reflect.TypeOf((*MockBeaconChainClient)(nil).StreamIndexedAttestations), varargs...)
}

// StreamMinimalConsensusInfo mocks base method.
func (m *MockBeaconChainClient) StreamMinimalConsensusInfo(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (v1alpha1.BeaconChain_StreamMinimalConsensusInfoClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamMinimalConsensusInfo", varargs...)
	ret0, _ := ret[0].(v1alpha1.BeaconChain_StreamMinimalConsensusInfoClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamMinimalConsensusInfo indicates an expected call of StreamMinimalConsensusInfo.
func (mr *MockBeaconChainClientMockRecorder) StreamMinimalConsensusInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamMinimalConsensusInfo", reflect.TypeOf((*MockBeaconChainClient)(nil).StreamMinimalConsensusInfo), varargs...)
}

// StreamValidatorsInfo mocks base method.
func (m *MockBeaconChainClient) StreamValidatorsInfo(ctx context.Context, opts ...grpc.CallOption) (v1alpha1.BeaconChain_StreamValidatorsInfoClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamValidatorsInfo", varargs...)
	ret0, _ := ret[0].(v1alpha1.BeaconChain_StreamValidatorsInfoClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamValidatorsInfo indicates an expected call of StreamValidatorsInfo.
func (mr *MockBeaconChainClientMockRecorder) StreamValidatorsInfo(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamValidatorsInfo", reflect.TypeOf((*MockBeaconChainClient)(nil).StreamValidatorsInfo), varargs...)
}

// SubmitAttesterSlashing mocks base method.
func (m *MockBeaconChainClient) SubmitAttesterSlashing(ctx context.Context, in *v1alpha1.AttesterSlashing, opts ...grpc.CallOption) (*v1alpha1.SubmitSlashingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitAttesterSlashing", varargs...)
	ret0, _ := ret[0].(*v1alpha1.SubmitSlashingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAttesterSlashing indicates an expected call of SubmitAttesterSlashing.
func (mr *MockBeaconChainClientMockRecorder) SubmitAttesterSlashing(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAttesterSlashing", reflect.TypeOf((*MockBeaconChainClient)(nil).SubmitAttesterSlashing), varargs...)
}

// SubmitProposerSlashing mocks base method.
func (m *MockBeaconChainClient) SubmitProposerSlashing(ctx context.Context, in *v1alpha1.ProposerSlashing, opts ...grpc.CallOption) (*v1alpha1.SubmitSlashingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitProposerSlashing", varargs...)
	ret0, _ := ret[0].(*v1alpha1.SubmitSlashingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitProposerSlashing indicates an expected call of SubmitProposerSlashing.
func (mr *MockBeaconChainClientMockRecorder) SubmitProposerSlashing(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitProposerSlashing", reflect.TypeOf((*MockBeaconChainClient)(nil).SubmitProposerSlashing), varargs...)
}

// MockBeaconChain_StreamAttestationsClient is a mock of BeaconChain_StreamAttestationsClient interface.
type MockBeaconChain_StreamAttestationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChain_StreamAttestationsClientMockRecorder
}

// MockBeaconChain_StreamAttestationsClientMockRecorder is the mock recorder for MockBeaconChain_StreamAttestationsClient.
type MockBeaconChain_StreamAttestationsClientMockRecorder struct {
	mock *MockBeaconChain_StreamAttestationsClient
}

// NewMockBeaconChain_StreamAttestationsClient creates a new mock instance.
func NewMockBeaconChain_StreamAttestationsClient(ctrl *gomock.Controller) *MockBeaconChain_StreamAttestationsClient {
	mock := &MockBeaconChain_StreamAttestationsClient{ctrl: ctrl}
	mock.recorder = &MockBeaconChain_StreamAttestationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChain_StreamAttestationsClient) EXPECT() *MockBeaconChain_StreamAttestationsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBeaconChain_StreamAttestationsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBeaconChain_StreamAttestationsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBeaconChain_StreamAttestationsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBeaconChain_StreamAttestationsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBeaconChain_StreamAttestationsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChain_StreamAttestationsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBeaconChain_StreamAttestationsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBeaconChain_StreamAttestationsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBeaconChain_StreamAttestationsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBeaconChain_StreamAttestationsClient) Recv() (*v1alpha1.Attestation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1alpha1.Attestation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBeaconChain_StreamAttestationsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBeaconChain_StreamAttestationsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBeaconChain_StreamAttestationsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBeaconChain_StreamAttestationsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChain_StreamAttestationsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBeaconChain_StreamAttestationsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBeaconChain_StreamAttestationsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChain_StreamAttestationsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBeaconChain_StreamAttestationsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBeaconChain_StreamAttestationsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBeaconChain_StreamAttestationsClient)(nil).Trailer))
}

// MockBeaconChain_StreamIndexedAttestationsClient is a mock of BeaconChain_StreamIndexedAttestationsClient interface.
type MockBeaconChain_StreamIndexedAttestationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChain_StreamIndexedAttestationsClientMockRecorder
}

// MockBeaconChain_StreamIndexedAttestationsClientMockRecorder is the mock recorder for MockBeaconChain_StreamIndexedAttestationsClient.
type MockBeaconChain_StreamIndexedAttestationsClientMockRecorder struct {
	mock *MockBeaconChain_StreamIndexedAttestationsClient
}

// NewMockBeaconChain_StreamIndexedAttestationsClient creates a new mock instance.
func NewMockBeaconChain_StreamIndexedAttestationsClient(ctrl *gomock.Controller) *MockBeaconChain_StreamIndexedAttestationsClient {
	mock := &MockBeaconChain_StreamIndexedAttestationsClient{ctrl: ctrl}
	mock.recorder = &MockBeaconChain_StreamIndexedAttestationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChain_StreamIndexedAttestationsClient) EXPECT() *MockBeaconChain_StreamIndexedAttestationsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBeaconChain_StreamIndexedAttestationsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBeaconChain_StreamIndexedAttestationsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBeaconChain_StreamIndexedAttestationsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBeaconChain_StreamIndexedAttestationsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBeaconChain_StreamIndexedAttestationsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBeaconChain_StreamIndexedAttestationsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBeaconChain_StreamIndexedAttestationsClient) Recv() (*v1alpha1.IndexedAttestation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1alpha1.IndexedAttestation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBeaconChain_StreamIndexedAttestationsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBeaconChain_StreamIndexedAttestationsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBeaconChain_StreamIndexedAttestationsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBeaconChain_StreamIndexedAttestationsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBeaconChain_StreamIndexedAttestationsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBeaconChain_StreamIndexedAttestationsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBeaconChain_StreamIndexedAttestationsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsClient)(nil).Trailer))
}

// MockBeaconChain_StreamBlocksClient is a mock of BeaconChain_StreamBlocksClient interface.
type MockBeaconChain_StreamBlocksClient struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChain_StreamBlocksClientMockRecorder
}

// MockBeaconChain_StreamBlocksClientMockRecorder is the mock recorder for MockBeaconChain_StreamBlocksClient.
type MockBeaconChain_StreamBlocksClientMockRecorder struct {
	mock *MockBeaconChain_StreamBlocksClient
}

// NewMockBeaconChain_StreamBlocksClient creates a new mock instance.
func NewMockBeaconChain_StreamBlocksClient(ctrl *gomock.Controller) *MockBeaconChain_StreamBlocksClient {
	mock := &MockBeaconChain_StreamBlocksClient{ctrl: ctrl}
	mock.recorder = &MockBeaconChain_StreamBlocksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChain_StreamBlocksClient) EXPECT() *MockBeaconChain_StreamBlocksClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBeaconChain_StreamBlocksClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBeaconChain_StreamBlocksClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBeaconChain_StreamBlocksClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBeaconChain_StreamBlocksClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBeaconChain_StreamBlocksClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChain_StreamBlocksClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBeaconChain_StreamBlocksClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBeaconChain_StreamBlocksClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBeaconChain_StreamBlocksClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBeaconChain_StreamBlocksClient) Recv() (*v1alpha1.SignedBeaconBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1alpha1.SignedBeaconBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBeaconChain_StreamBlocksClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBeaconChain_StreamBlocksClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBeaconChain_StreamBlocksClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBeaconChain_StreamBlocksClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChain_StreamBlocksClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBeaconChain_StreamBlocksClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBeaconChain_StreamBlocksClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChain_StreamBlocksClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBeaconChain_StreamBlocksClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBeaconChain_StreamBlocksClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBeaconChain_StreamBlocksClient)(nil).Trailer))
}

// MockBeaconChain_StreamChainHeadClient is a mock of BeaconChain_StreamChainHeadClient interface.
type MockBeaconChain_StreamChainHeadClient struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChain_StreamChainHeadClientMockRecorder
}

// MockBeaconChain_StreamChainHeadClientMockRecorder is the mock recorder for MockBeaconChain_StreamChainHeadClient.
type MockBeaconChain_StreamChainHeadClientMockRecorder struct {
	mock *MockBeaconChain_StreamChainHeadClient
}

// NewMockBeaconChain_StreamChainHeadClient creates a new mock instance.
func NewMockBeaconChain_StreamChainHeadClient(ctrl *gomock.Controller) *MockBeaconChain_StreamChainHeadClient {
	mock := &MockBeaconChain_StreamChainHeadClient{ctrl: ctrl}
	mock.recorder = &MockBeaconChain_StreamChainHeadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChain_StreamChainHeadClient) EXPECT() *MockBeaconChain_StreamChainHeadClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBeaconChain_StreamChainHeadClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBeaconChain_StreamChainHeadClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBeaconChain_StreamChainHeadClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBeaconChain_StreamChainHeadClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBeaconChain_StreamChainHeadClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChain_StreamChainHeadClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBeaconChain_StreamChainHeadClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBeaconChain_StreamChainHeadClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBeaconChain_StreamChainHeadClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBeaconChain_StreamChainHeadClient) Recv() (*v1alpha1.ChainHead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1alpha1.ChainHead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBeaconChain_StreamChainHeadClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBeaconChain_StreamChainHeadClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBeaconChain_StreamChainHeadClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBeaconChain_StreamChainHeadClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChain_StreamChainHeadClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBeaconChain_StreamChainHeadClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBeaconChain_StreamChainHeadClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChain_StreamChainHeadClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBeaconChain_StreamChainHeadClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBeaconChain_StreamChainHeadClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBeaconChain_StreamChainHeadClient)(nil).Trailer))
}

// MockBeaconChain_StreamValidatorsInfoClient is a mock of BeaconChain_StreamValidatorsInfoClient interface.
type MockBeaconChain_StreamValidatorsInfoClient struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChain_StreamValidatorsInfoClientMockRecorder
}

// MockBeaconChain_StreamValidatorsInfoClientMockRecorder is the mock recorder for MockBeaconChain_StreamValidatorsInfoClient.
type MockBeaconChain_StreamValidatorsInfoClientMockRecorder struct {
	mock *MockBeaconChain_StreamValidatorsInfoClient
}

// NewMockBeaconChain_StreamValidatorsInfoClient creates a new mock instance.
func NewMockBeaconChain_StreamValidatorsInfoClient(ctrl *gomock.Controller) *MockBeaconChain_StreamValidatorsInfoClient {
	mock := &MockBeaconChain_StreamValidatorsInfoClient{ctrl: ctrl}
	mock.recorder = &MockBeaconChain_StreamValidatorsInfoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChain_StreamValidatorsInfoClient) EXPECT() *MockBeaconChain_StreamValidatorsInfoClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBeaconChain_StreamValidatorsInfoClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBeaconChain_StreamValidatorsInfoClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBeaconChain_StreamValidatorsInfoClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBeaconChain_StreamValidatorsInfoClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBeaconChain_StreamValidatorsInfoClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBeaconChain_StreamValidatorsInfoClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBeaconChain_StreamValidatorsInfoClient) Recv() (*v1alpha1.ValidatorInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1alpha1.ValidatorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBeaconChain_StreamValidatorsInfoClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBeaconChain_StreamValidatorsInfoClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBeaconChain_StreamValidatorsInfoClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBeaconChain_StreamValidatorsInfoClient) Send(arg0 *v1alpha1.ValidatorChangeSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBeaconChain_StreamValidatorsInfoClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBeaconChain_StreamValidatorsInfoClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBeaconChain_StreamValidatorsInfoClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBeaconChain_StreamValidatorsInfoClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBeaconChain_StreamValidatorsInfoClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoClient)(nil).Trailer))
}

// MockBeaconChain_StreamMinimalConsensusInfoClient is a mock of BeaconChain_StreamMinimalConsensusInfoClient interface.
type MockBeaconChain_StreamMinimalConsensusInfoClient struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChain_StreamMinimalConsensusInfoClientMockRecorder
}

// MockBeaconChain_StreamMinimalConsensusInfoClientMockRecorder is the mock recorder for MockBeaconChain_StreamMinimalConsensusInfoClient.
type MockBeaconChain_StreamMinimalConsensusInfoClientMockRecorder struct {
	mock *MockBeaconChain_StreamMinimalConsensusInfoClient
}

// NewMockBeaconChain_StreamMinimalConsensusInfoClient creates a new mock instance.
func NewMockBeaconChain_StreamMinimalConsensusInfoClient(ctrl *gomock.Controller) *MockBeaconChain_StreamMinimalConsensusInfoClient {
	mock := &MockBeaconChain_StreamMinimalConsensusInfoClient{ctrl: ctrl}
	mock.recorder = &MockBeaconChain_StreamMinimalConsensusInfoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChain_StreamMinimalConsensusInfoClient) EXPECT() *MockBeaconChain_StreamMinimalConsensusInfoClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBeaconChain_StreamMinimalConsensusInfoClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBeaconChain_StreamMinimalConsensusInfoClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBeaconChain_StreamMinimalConsensusInfoClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBeaconChain_StreamMinimalConsensusInfoClient) Recv() (*v1alpha1.MinimalConsensusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1alpha1.MinimalConsensusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBeaconChain_StreamMinimalConsensusInfoClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBeaconChain_StreamMinimalConsensusInfoClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBeaconChain_StreamMinimalConsensusInfoClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoClient)(nil).Trailer))
}

// MockBeaconChainServer is a mock of BeaconChainServer interface.
type MockBeaconChainServer struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChainServerMockRecorder
}

// MockBeaconChainServerMockRecorder is the mock recorder for MockBeaconChainServer.
type MockBeaconChainServerMockRecorder struct {
	mock *MockBeaconChainServer
}

// NewMockBeaconChainServer creates a new mock instance.
func NewMockBeaconChainServer(ctrl *gomock.Controller) *MockBeaconChainServer {
	mock := &MockBeaconChainServer{ctrl: ctrl}
	mock.recorder = &MockBeaconChainServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChainServer) EXPECT() *MockBeaconChainServerMockRecorder {
	return m.recorder
}

// AttestationPool mocks base method.
func (m *MockBeaconChainServer) AttestationPool(arg0 context.Context, arg1 *v1alpha1.AttestationPoolRequest) (*v1alpha1.AttestationPoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttestationPool", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.AttestationPoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttestationPool indicates an expected call of AttestationPool.
func (mr *MockBeaconChainServerMockRecorder) AttestationPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttestationPool", reflect.TypeOf((*MockBeaconChainServer)(nil).AttestationPool), arg0, arg1)
}

// GetBeaconConfig mocks base method.
func (m *MockBeaconChainServer) GetBeaconConfig(arg0 context.Context, arg1 *types.Empty) (*v1alpha1.BeaconConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeaconConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.BeaconConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeaconConfig indicates an expected call of GetBeaconConfig.
func (mr *MockBeaconChainServerMockRecorder) GetBeaconConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeaconConfig", reflect.TypeOf((*MockBeaconChainServer)(nil).GetBeaconConfig), arg0, arg1)
}

// GetChainHead mocks base method.
func (m *MockBeaconChainServer) GetChainHead(arg0 context.Context, arg1 *types.Empty) (*v1alpha1.ChainHead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainHead", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ChainHead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainHead indicates an expected call of GetChainHead.
func (mr *MockBeaconChainServerMockRecorder) GetChainHead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainHead", reflect.TypeOf((*MockBeaconChainServer)(nil).GetChainHead), arg0, arg1)
}

// GetIndividualVotes mocks base method.
func (m *MockBeaconChainServer) GetIndividualVotes(arg0 context.Context, arg1 *v1alpha1.IndividualVotesRequest) (*v1alpha1.IndividualVotesRespond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndividualVotes", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.IndividualVotesRespond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndividualVotes indicates an expected call of GetIndividualVotes.
func (mr *MockBeaconChainServerMockRecorder) GetIndividualVotes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualVotes", reflect.TypeOf((*MockBeaconChainServer)(nil).GetIndividualVotes), arg0, arg1)
}

// GetValidator mocks base method.
func (m *MockBeaconChainServer) GetValidator(arg0 context.Context, arg1 *v1alpha1.GetValidatorRequest) (*v1alpha1.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidator", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidator indicates an expected call of GetValidator.
func (mr *MockBeaconChainServerMockRecorder) GetValidator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockBeaconChainServer)(nil).GetValidator), arg0, arg1)
}

// GetValidatorActiveSetChanges mocks base method.
func (m *MockBeaconChainServer) GetValidatorActiveSetChanges(arg0 context.Context, arg1 *v1alpha1.GetValidatorActiveSetChangesRequest) (*v1alpha1.ActiveSetChanges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorActiveSetChanges", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ActiveSetChanges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorActiveSetChanges indicates an expected call of GetValidatorActiveSetChanges.
func (mr *MockBeaconChainServerMockRecorder) GetValidatorActiveSetChanges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorActiveSetChanges", reflect.TypeOf((*MockBeaconChainServer)(nil).GetValidatorActiveSetChanges), arg0, arg1)
}

// GetValidatorParticipation mocks base method.
func (m *MockBeaconChainServer) GetValidatorParticipation(arg0 context.Context, arg1 *v1alpha1.GetValidatorParticipationRequest) (*v1alpha1.ValidatorParticipationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorParticipation", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ValidatorParticipationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorParticipation indicates an expected call of GetValidatorParticipation.
func (mr *MockBeaconChainServerMockRecorder) GetValidatorParticipation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorParticipation", reflect.TypeOf((*MockBeaconChainServer)(nil).GetValidatorParticipation), arg0, arg1)
}

// GetValidatorPerformance mocks base method.
func (m *MockBeaconChainServer) GetValidatorPerformance(arg0 context.Context, arg1 *v1alpha1.ValidatorPerformanceRequest) (*v1alpha1.ValidatorPerformanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorPerformance", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ValidatorPerformanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorPerformance indicates an expected call of GetValidatorPerformance.
func (mr *MockBeaconChainServerMockRecorder) GetValidatorPerformance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorPerformance", reflect.TypeOf((*MockBeaconChainServer)(nil).GetValidatorPerformance), arg0, arg1)
}

// GetValidatorQueue mocks base method.
func (m *MockBeaconChainServer) GetValidatorQueue(arg0 context.Context, arg1 *types.Empty) (*v1alpha1.ValidatorQueue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorQueue", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ValidatorQueue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorQueue indicates an expected call of GetValidatorQueue.
func (mr *MockBeaconChainServerMockRecorder) GetValidatorQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorQueue", reflect.TypeOf((*MockBeaconChainServer)(nil).GetValidatorQueue), arg0, arg1)
}

// GetWeakSubjectivityCheckpoint mocks base method.
func (m *MockBeaconChainServer) GetWeakSubjectivityCheckpoint(arg0 context.Context, arg1 *types.Empty) (*v1alpha1.WeakSubjectivityCheckpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeakSubjectivityCheckpoint", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.WeakSubjectivityCheckpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeakSubjectivityCheckpoint indicates an expected call of GetWeakSubjectivityCheckpoint.
func (mr *MockBeaconChainServerMockRecorder) GetWeakSubjectivityCheckpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeakSubjectivityCheckpoint", reflect.TypeOf((*MockBeaconChainServer)(nil).GetWeakSubjectivityCheckpoint), arg0, arg1)
}

// ListAttestations mocks base method.
func (m *MockBeaconChainServer) ListAttestations(arg0 context.Context, arg1 *v1alpha1.ListAttestationsRequest) (*v1alpha1.ListAttestationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttestations", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ListAttestationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttestations indicates an expected call of ListAttestations.
func (mr *MockBeaconChainServerMockRecorder) ListAttestations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttestations", reflect.TypeOf((*MockBeaconChainServer)(nil).ListAttestations), arg0, arg1)
}

// ListBeaconCommittees mocks base method.
func (m *MockBeaconChainServer) ListBeaconCommittees(arg0 context.Context, arg1 *v1alpha1.ListCommitteesRequest) (*v1alpha1.BeaconCommittees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBeaconCommittees", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.BeaconCommittees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBeaconCommittees indicates an expected call of ListBeaconCommittees.
func (mr *MockBeaconChainServerMockRecorder) ListBeaconCommittees(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBeaconCommittees", reflect.TypeOf((*MockBeaconChainServer)(nil).ListBeaconCommittees), arg0, arg1)
}

// ListBlocks mocks base method.
func (m *MockBeaconChainServer) ListBlocks(arg0 context.Context, arg1 *v1alpha1.ListBlocksRequest) (*v1alpha1.ListBlocksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlocks", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ListBlocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlocks indicates an expected call of ListBlocks.
func (mr *MockBeaconChainServerMockRecorder) ListBlocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlocks", reflect.TypeOf((*MockBeaconChainServer)(nil).ListBlocks), arg0, arg1)
}

// ListIndexedAttestations mocks base method.
func (m *MockBeaconChainServer) ListIndexedAttestations(arg0 context.Context, arg1 *v1alpha1.ListIndexedAttestationsRequest) (*v1alpha1.ListIndexedAttestationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexedAttestations", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ListIndexedAttestationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndexedAttestations indicates an expected call of ListIndexedAttestations.
func (mr *MockBeaconChainServerMockRecorder) ListIndexedAttestations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexedAttestations", reflect.TypeOf((*MockBeaconChainServer)(nil).ListIndexedAttestations), arg0, arg1)
}

// ListValidatorAssignments mocks base method.
func (m *MockBeaconChainServer) ListValidatorAssignments(arg0 context.Context, arg1 *v1alpha1.ListValidatorAssignmentsRequest) (*v1alpha1.ValidatorAssignments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListValidatorAssignments", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ValidatorAssignments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListValidatorAssignments indicates an expected call of ListValidatorAssignments.
func (mr *MockBeaconChainServerMockRecorder) ListValidatorAssignments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListValidatorAssignments", reflect.TypeOf((*MockBeaconChainServer)(nil).ListValidatorAssignments), arg0, arg1)
}

// ListValidatorBalances mocks base method.
func (m *MockBeaconChainServer) ListValidatorBalances(arg0 context.Context, arg1 *v1alpha1.ListValidatorBalancesRequest) (*v1alpha1.ValidatorBalances, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListValidatorBalances", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ValidatorBalances)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListValidatorBalances indicates an expected call of ListValidatorBalances.
func (mr *MockBeaconChainServerMockRecorder) ListValidatorBalances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListValidatorBalances", reflect.TypeOf((*MockBeaconChainServer)(nil).ListValidatorBalances), arg0, arg1)
}

// ListValidators mocks base method.
func (m *MockBeaconChainServer) ListValidators(arg0 context.Context, arg1 *v1alpha1.ListValidatorsRequest) (*v1alpha1.Validators, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListValidators", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Validators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListValidators indicates an expected call of ListValidators.
func (mr *MockBeaconChainServerMockRecorder) ListValidators(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListValidators", reflect.TypeOf((*MockBeaconChainServer)(nil).ListValidators), arg0, arg1)
}

// StreamAttestations mocks base method.
func (m *MockBeaconChainServer) StreamAttestations(arg0 *types.Empty, arg1 v1alpha1.BeaconChain_StreamAttestationsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamAttestations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamAttestations indicates an expected call of StreamAttestations.
func (mr *MockBeaconChainServerMockRecorder) StreamAttestations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamAttestations", reflect.TypeOf((*MockBeaconChainServer)(nil).StreamAttestations), arg0, arg1)
}

// StreamBlocks mocks base method.
func (m *MockBeaconChainServer) StreamBlocks(arg0 *v1alpha1.StreamBlocksRequest, arg1 v1alpha1.BeaconChain_StreamBlocksServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamBlocks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamBlocks indicates an expected call of StreamBlocks.
func (mr *MockBeaconChainServerMockRecorder) StreamBlocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamBlocks", reflect.TypeOf((*MockBeaconChainServer)(nil).StreamBlocks), arg0, arg1)
}

// StreamChainHead mocks base method.
func (m *MockBeaconChainServer) StreamChainHead(arg0 *types.Empty, arg1 v1alpha1.BeaconChain_StreamChainHeadServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamChainHead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamChainHead indicates an expected call of StreamChainHead.
func (mr *MockBeaconChainServerMockRecorder) StreamChainHead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamChainHead", reflect.TypeOf((*MockBeaconChainServer)(nil).StreamChainHead), arg0, arg1)
}

// StreamIndexedAttestations mocks base method.
func (m *MockBeaconChainServer) StreamIndexedAttestations(arg0 *types.Empty, arg1 v1alpha1.BeaconChain_StreamIndexedAttestationsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamIndexedAttestations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamIndexedAttestations indicates an expected call of StreamIndexedAttestations.
func (mr *MockBeaconChainServerMockRecorder) StreamIndexedAttestations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamIndexedAttestations", reflect.TypeOf((*MockBeaconChainServer)(nil).StreamIndexedAttestations), arg0, arg1)
}

// StreamMinimalConsensusInfo mocks base method.
func (m *MockBeaconChainServer) StreamMinimalConsensusInfo(arg0 *types.Empty, arg1 v1alpha1.BeaconChain_StreamMinimalConsensusInfoServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamMinimalConsensusInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamMinimalConsensusInfo indicates an expected call of StreamMinimalConsensusInfo.
func (mr *MockBeaconChainServerMockRecorder) StreamMinimalConsensusInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamMinimalConsensusInfo", reflect.TypeOf((*MockBeaconChainServer)(nil).StreamMinimalConsensusInfo), arg0, arg1)
}

// StreamValidatorsInfo mocks base method.
func (m *MockBeaconChainServer) StreamValidatorsInfo(arg0 v1alpha1.BeaconChain_StreamValidatorsInfoServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamValidatorsInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamValidatorsInfo indicates an expected call of StreamValidatorsInfo.
func (mr *MockBeaconChainServerMockRecorder) StreamValidatorsInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamValidatorsInfo", reflect.TypeOf((*MockBeaconChainServer)(nil).StreamValidatorsInfo), arg0)
}

// SubmitAttesterSlashing mocks base method.
func (m *MockBeaconChainServer) SubmitAttesterSlashing(arg0 context.Context, arg1 *v1alpha1.AttesterSlashing) (*v1alpha1.SubmitSlashingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAttesterSlashing", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.SubmitSlashingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAttesterSlashing indicates an expected call of SubmitAttesterSlashing.
func (mr *MockBeaconChainServerMockRecorder) SubmitAttesterSlashing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAttesterSlashing", reflect.TypeOf((*MockBeaconChainServer)(nil).SubmitAttesterSlashing), arg0, arg1)
}

// SubmitProposerSlashing mocks base method.
func (m *MockBeaconChainServer) SubmitProposerSlashing(arg0 context.Context, arg1 *v1alpha1.ProposerSlashing) (*v1alpha1.SubmitSlashingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitProposerSlashing", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.SubmitSlashingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitProposerSlashing indicates an expected call of SubmitProposerSlashing.
func (mr *MockBeaconChainServerMockRecorder) SubmitProposerSlashing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitProposerSlashing", reflect.TypeOf((*MockBeaconChainServer)(nil).SubmitProposerSlashing), arg0, arg1)
}

// MockBeaconChain_StreamAttestationsServer is a mock of BeaconChain_StreamAttestationsServer interface.
type MockBeaconChain_StreamAttestationsServer struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChain_StreamAttestationsServerMockRecorder
}

// MockBeaconChain_StreamAttestationsServerMockRecorder is the mock recorder for MockBeaconChain_StreamAttestationsServer.
type MockBeaconChain_StreamAttestationsServerMockRecorder struct {
	mock *MockBeaconChain_StreamAttestationsServer
}

// NewMockBeaconChain_StreamAttestationsServer creates a new mock instance.
func NewMockBeaconChain_StreamAttestationsServer(ctrl *gomock.Controller) *MockBeaconChain_StreamAttestationsServer {
	mock := &MockBeaconChain_StreamAttestationsServer{ctrl: ctrl}
	mock.recorder = &MockBeaconChain_StreamAttestationsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChain_StreamAttestationsServer) EXPECT() *MockBeaconChain_StreamAttestationsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBeaconChain_StreamAttestationsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBeaconChain_StreamAttestationsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChain_StreamAttestationsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBeaconChain_StreamAttestationsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBeaconChain_StreamAttestationsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChain_StreamAttestationsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBeaconChain_StreamAttestationsServer) Send(arg0 *v1alpha1.Attestation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBeaconChain_StreamAttestationsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBeaconChain_StreamAttestationsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBeaconChain_StreamAttestationsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBeaconChain_StreamAttestationsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBeaconChain_StreamAttestationsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBeaconChain_StreamAttestationsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBeaconChain_StreamAttestationsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChain_StreamAttestationsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBeaconChain_StreamAttestationsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBeaconChain_StreamAttestationsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBeaconChain_StreamAttestationsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBeaconChain_StreamAttestationsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBeaconChain_StreamAttestationsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBeaconChain_StreamAttestationsServer)(nil).SetTrailer), arg0)
}

// MockBeaconChain_StreamIndexedAttestationsServer is a mock of BeaconChain_StreamIndexedAttestationsServer interface.
type MockBeaconChain_StreamIndexedAttestationsServer struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChain_StreamIndexedAttestationsServerMockRecorder
}

// MockBeaconChain_StreamIndexedAttestationsServerMockRecorder is the mock recorder for MockBeaconChain_StreamIndexedAttestationsServer.
type MockBeaconChain_StreamIndexedAttestationsServerMockRecorder struct {
	mock *MockBeaconChain_StreamIndexedAttestationsServer
}

// NewMockBeaconChain_StreamIndexedAttestationsServer creates a new mock instance.
func NewMockBeaconChain_StreamIndexedAttestationsServer(ctrl *gomock.Controller) *MockBeaconChain_StreamIndexedAttestationsServer {
	mock := &MockBeaconChain_StreamIndexedAttestationsServer{ctrl: ctrl}
	mock.recorder = &MockBeaconChain_StreamIndexedAttestationsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChain_StreamIndexedAttestationsServer) EXPECT() *MockBeaconChain_StreamIndexedAttestationsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBeaconChain_StreamIndexedAttestationsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBeaconChain_StreamIndexedAttestationsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBeaconChain_StreamIndexedAttestationsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBeaconChain_StreamIndexedAttestationsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBeaconChain_StreamIndexedAttestationsServer) Send(arg0 *v1alpha1.IndexedAttestation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBeaconChain_StreamIndexedAttestationsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBeaconChain_StreamIndexedAttestationsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBeaconChain_StreamIndexedAttestationsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBeaconChain_StreamIndexedAttestationsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBeaconChain_StreamIndexedAttestationsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBeaconChain_StreamIndexedAttestationsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBeaconChain_StreamIndexedAttestationsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBeaconChain_StreamIndexedAttestationsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBeaconChain_StreamIndexedAttestationsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBeaconChain_StreamIndexedAttestationsServer)(nil).SetTrailer), arg0)
}

// MockBeaconChain_StreamBlocksServer is a mock of BeaconChain_StreamBlocksServer interface.
type MockBeaconChain_StreamBlocksServer struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChain_StreamBlocksServerMockRecorder
}

// MockBeaconChain_StreamBlocksServerMockRecorder is the mock recorder for MockBeaconChain_StreamBlocksServer.
type MockBeaconChain_StreamBlocksServerMockRecorder struct {
	mock *MockBeaconChain_StreamBlocksServer
}

// NewMockBeaconChain_StreamBlocksServer creates a new mock instance.
func NewMockBeaconChain_StreamBlocksServer(ctrl *gomock.Controller) *MockBeaconChain_StreamBlocksServer {
	mock := &MockBeaconChain_StreamBlocksServer{ctrl: ctrl}
	mock.recorder = &MockBeaconChain_StreamBlocksServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChain_StreamBlocksServer) EXPECT() *MockBeaconChain_StreamBlocksServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBeaconChain_StreamBlocksServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBeaconChain_StreamBlocksServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChain_StreamBlocksServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBeaconChain_StreamBlocksServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBeaconChain_StreamBlocksServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChain_StreamBlocksServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBeaconChain_StreamBlocksServer) Send(arg0 *v1alpha1.SignedBeaconBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBeaconChain_StreamBlocksServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBeaconChain_StreamBlocksServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBeaconChain_StreamBlocksServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBeaconChain_StreamBlocksServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBeaconChain_StreamBlocksServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBeaconChain_StreamBlocksServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBeaconChain_StreamBlocksServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChain_StreamBlocksServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBeaconChain_StreamBlocksServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBeaconChain_StreamBlocksServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBeaconChain_StreamBlocksServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBeaconChain_StreamBlocksServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBeaconChain_StreamBlocksServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBeaconChain_StreamBlocksServer)(nil).SetTrailer), arg0)
}

// MockBeaconChain_StreamChainHeadServer is a mock of BeaconChain_StreamChainHeadServer interface.
type MockBeaconChain_StreamChainHeadServer struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChain_StreamChainHeadServerMockRecorder
}

// MockBeaconChain_StreamChainHeadServerMockRecorder is the mock recorder for MockBeaconChain_StreamChainHeadServer.
type MockBeaconChain_StreamChainHeadServerMockRecorder struct {
	mock *MockBeaconChain_StreamChainHeadServer
}

// NewMockBeaconChain_StreamChainHeadServer creates a new mock instance.
func NewMockBeaconChain_StreamChainHeadServer(ctrl *gomock.Controller) *MockBeaconChain_StreamChainHeadServer {
	mock := &MockBeaconChain_StreamChainHeadServer{ctrl: ctrl}
	mock.recorder = &MockBeaconChain_StreamChainHeadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChain_StreamChainHeadServer) EXPECT() *MockBeaconChain_StreamChainHeadServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBeaconChain_StreamChainHeadServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBeaconChain_StreamChainHeadServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChain_StreamChainHeadServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBeaconChain_StreamChainHeadServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBeaconChain_StreamChainHeadServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChain_StreamChainHeadServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBeaconChain_StreamChainHeadServer) Send(arg0 *v1alpha1.ChainHead) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBeaconChain_StreamChainHeadServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBeaconChain_StreamChainHeadServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBeaconChain_StreamChainHeadServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBeaconChain_StreamChainHeadServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBeaconChain_StreamChainHeadServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBeaconChain_StreamChainHeadServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBeaconChain_StreamChainHeadServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChain_StreamChainHeadServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBeaconChain_StreamChainHeadServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBeaconChain_StreamChainHeadServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBeaconChain_StreamChainHeadServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBeaconChain_StreamChainHeadServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBeaconChain_StreamChainHeadServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBeaconChain_StreamChainHeadServer)(nil).SetTrailer), arg0)
}

// MockBeaconChain_StreamValidatorsInfoServer is a mock of BeaconChain_StreamValidatorsInfoServer interface.
type MockBeaconChain_StreamValidatorsInfoServer struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChain_StreamValidatorsInfoServerMockRecorder
}

// MockBeaconChain_StreamValidatorsInfoServerMockRecorder is the mock recorder for MockBeaconChain_StreamValidatorsInfoServer.
type MockBeaconChain_StreamValidatorsInfoServerMockRecorder struct {
	mock *MockBeaconChain_StreamValidatorsInfoServer
}

// NewMockBeaconChain_StreamValidatorsInfoServer creates a new mock instance.
func NewMockBeaconChain_StreamValidatorsInfoServer(ctrl *gomock.Controller) *MockBeaconChain_StreamValidatorsInfoServer {
	mock := &MockBeaconChain_StreamValidatorsInfoServer{ctrl: ctrl}
	mock.recorder = &MockBeaconChain_StreamValidatorsInfoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChain_StreamValidatorsInfoServer) EXPECT() *MockBeaconChain_StreamValidatorsInfoServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBeaconChain_StreamValidatorsInfoServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBeaconChain_StreamValidatorsInfoServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockBeaconChain_StreamValidatorsInfoServer) Recv() (*v1alpha1.ValidatorChangeSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1alpha1.ValidatorChangeSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBeaconChain_StreamValidatorsInfoServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBeaconChain_StreamValidatorsInfoServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBeaconChain_StreamValidatorsInfoServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBeaconChain_StreamValidatorsInfoServer) Send(arg0 *v1alpha1.ValidatorInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBeaconChain_StreamValidatorsInfoServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBeaconChain_StreamValidatorsInfoServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBeaconChain_StreamValidatorsInfoServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBeaconChain_StreamValidatorsInfoServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBeaconChain_StreamValidatorsInfoServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBeaconChain_StreamValidatorsInfoServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBeaconChain_StreamValidatorsInfoServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBeaconChain_StreamValidatorsInfoServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBeaconChain_StreamValidatorsInfoServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBeaconChain_StreamValidatorsInfoServer)(nil).SetTrailer), arg0)
}

// MockBeaconChain_StreamMinimalConsensusInfoServer is a mock of BeaconChain_StreamMinimalConsensusInfoServer interface.
type MockBeaconChain_StreamMinimalConsensusInfoServer struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChain_StreamMinimalConsensusInfoServerMockRecorder
}

// MockBeaconChain_StreamMinimalConsensusInfoServerMockRecorder is the mock recorder for MockBeaconChain_StreamMinimalConsensusInfoServer.
type MockBeaconChain_StreamMinimalConsensusInfoServerMockRecorder struct {
	mock *MockBeaconChain_StreamMinimalConsensusInfoServer
}

// NewMockBeaconChain_StreamMinimalConsensusInfoServer creates a new mock instance.
func NewMockBeaconChain_StreamMinimalConsensusInfoServer(ctrl *gomock.Controller) *MockBeaconChain_StreamMinimalConsensusInfoServer {
	mock := &MockBeaconChain_StreamMinimalConsensusInfoServer{ctrl: ctrl}
	mock.recorder = &MockBeaconChain_StreamMinimalConsensusInfoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconChain_StreamMinimalConsensusInfoServer) EXPECT() *MockBeaconChain_StreamMinimalConsensusInfoServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBeaconChain_StreamMinimalConsensusInfoServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBeaconChain_StreamMinimalConsensusInfoServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBeaconChain_StreamMinimalConsensusInfoServer) Send(arg0 *v1alpha1.MinimalConsensusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBeaconChain_StreamMinimalConsensusInfoServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBeaconChain_StreamMinimalConsensusInfoServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBeaconChain_StreamMinimalConsensusInfoServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBeaconChain_StreamMinimalConsensusInfoServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBeaconChain_StreamMinimalConsensusInfoServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBeaconChain_StreamMinimalConsensusInfoServer)(nil).SetTrailer), arg0)
}
